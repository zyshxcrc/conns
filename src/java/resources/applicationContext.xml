<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:folw="http://www.springframework.org/schema/webflow-config"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        http://www.springframework.org/schema/webflow-config
        http://www.springframework.org/schema/webflow-config/spring-webflow-config-2.4.xsd">


    <context:component-scan base-package="conn"/>
        <!-- 不处理静态资源-->
    <mvc:default-servlet-handler/>
        <!--  to support the annotated controller methods like @RequestMapping, @ExceptionHandler, etc. that come with MVC-->
    <mvc:annotation-driven/>
        <!-- 属性文件读入 -->
    <!--<context:property-placeholder location="classpath*:system.properties,classpath*:redis.properties,classpath*:db.properties"/>-->
        <!-- 子配置文件文件读入 -->
    <!--<import resource="classpath:applicationContextMongoDB.xml"/>-->
    
    <folw:flow-executor id="flowExecutor"/>
    <folw:flow-registry id="registry" base-path="/WEB-INF/flow">
        <folw:flow-location-pattern value="**-flow.XML"/>
    </folw:flow-registry>
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
        <property name="flowRegistry" ref="registory"/>
    </bean>
    <bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
        <property name="flowExecutor" ref="flowExecutor"/>
    </bean>

        <!-- =====================================Spring MVC===================================== -->
        <!-- spring mvc 视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

        <!-- ================================mysql datasource=================================== -->
        <!-- 使用druid作为数据源连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close" >
        <!-- 数据库的配置，host：主机名，port：端口，database：数据库 -->
        <property name="url" value="jdbc:mysql://188.166.216.27:3306/practice?characterEncoding=utf8" />
        <!-- 连接数据的用户名-->
        <property name="username" value="zzhblh" />
        <!-- 连接数据库的密码-->
        <property name="password" value="zzhblh1" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="30000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="testWhileIdle" value="true" />
        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
        <property name="validationQuery" value="select 1 " />
        <!-- ******重要的配置：监控统计拦截的filters,日志记录 *start* ******-->
        <!-- 并在filters属性中配置了log4j，ref中的bean是下面拦截器的配置 -->
        <!-- proxyFilters和filters是组合关系,前者是根据bean配置,后者根据别名配置的-->
        <!-- stat是statfilter的别名,log4j是logFilter的别名-->
        <!-- 监控统计拦截的filters,日志记录,这里开启了stat,wall（sql翻过墙过滤监控）,log4j（log4j的监控）配置 -->
        <property name="proxyFilters">
            <list>
                <ref bean="statfilter" />
                <ref bean="logFilter" />
            </list>
        </property>
        <property name="filters" value="wall" />
        <!--  *end* -->
    </bean>

            <!-- 慢SQL记录 *start* -->
    <bean id="statfilter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!-- 开启合并sql -->
        <property name="mergeSql" value="true" />
        <!-- 开启慢查询语句,1秒 -->
        <property name="slowSqlMillis" value="1000" />
        <property name="logSlowSql" value="true" />
    </bean>

    <bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter">
    <!-- <property name="resultSetLogEnabled" value="false" /> -->
    <!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->
    </bean>
            <!-- 慢SQL记录  *end* -->

            <!--- ================================shiro==================================== -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
            <!-- 数据库保存的密码是加密的，所以这里需要配置一个密码匹配对象 -->
    <bean id="sha512Matcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="SHA-512"/>
        <property name="hashIterations" value="2"/>
    </bean>
            <!-- 随机加盐 -->
    <bean id="secureRandomNumberGenerate" class="org.apache.shiro.crypto.SecureRandomNumberGenerator">
        <property name="defaultNextBytesSize" value="5"/>
    </bean>

    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <!--
        <property name="saltStyle" value="COLUMN"/>
        <property name="credentialsMatcher" ref="sha512Matcher"/>
        -->
        <property name="permissionsLookupEnabled" value="true"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="authenticationQuery"
                  value="SELECT password FROM sec_user WHERE user_name = ?"/>
        <property name="userRolesQuery"
                  value="SELECT role_name from sec_user_role left join sec_role using(role_id) left join sec_user using(user_id) WHERE user_name = ?"/>
        <property name="permissionsQuery"
                  value="SELECT permission_name FROM sec_role_permission left join sec_role using(role_id) left join sec_permission using(permission_id) WHERE role_name = ?"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="jdbcRealm"/>
    </bean>

            <!--Shiro SecurityUtils的配置-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口，这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="/shiro/login"/>
        <!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
        <!-- <property name="successUrl" value="/" ></property> -->
        <!-- 用户访问未对其授权的资源时，所显示的连接 -->
        <property name="unauthorizedUrl" value="/"/>
        <property name="filterChainDefinitions">
            <value>
                /shiro/*=anon
                /home/*=authc
                /home/create**=authc,perms[admin:create]
            </value>
        </property>
    </bean>

        <!--除了使用过滤器，还可以使用注解 -->
        <!--
        <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
        <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
            <property name="securityManager" ref="securityManager"/>
        </bean>
        -->


</beans>